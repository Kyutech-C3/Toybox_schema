// proto/schema/users/users.proto
syntax = "proto3";

package users;
import "proto/third_party/google/api/annotations.proto";
import "proto/schema/users/schema/users/resource.proto";
import "proto/schema/users/schema/user_id/resource.proto";
import "proto/schema/users/schema/me/resource.proto";
import "proto/schema/users/model/users.proto";
import "google/protobuf/empty.proto";
option go_package = "./";

service UsersService {
  rpc GetMe(google.protobuf.Empty) returns (users.model.User) {
    option (google.api.http) = {
      get : "/api/v1/users/@me"
    };
  };
  rpc PutMe(.users.schema.me.PutMeRequest) returns (users.model.User) {
    option (google.api.http) = {
      put : "/api/v1/users/@me"
      body : "*"
    };
  };
  rpc GetUsers(.users.schema.users.GetUsersRequest)
      returns (.users.schema.users.GetUsersResponse) {
    option (google.api.http) = {
      get : "/api/v1/users"
    };
  };
  rpc GetUser(.users.schema.user_id.GetUserRequest) returns (users.model.User) {
    option (google.api.http) = {
      get : "/api/v1/users/{user_id}"
    };
  };
  rpc GetMeWorks(.users.schema.me.GetMeWorksRequest)
      returns (.users.schema.me.GetMeWorksResponse) {
    option (google.api.http) = {
      get : "/api/v1/users/@me/works"
      response_body : "works"
    };
  };
  rpc GetUserWorks(.users.schema.user_id.GetUserWorksRequest)
      returns (.users.schema.user_id.GetUserWorksResponse) {
    option (google.api.http) = {
      get : "/api/v1/users/{user_id}/works"
      response_body : "works"
    };
  };
  rpc GetMeFavorites(google.protobuf.Empty)
      returns (.users.schema.me.GetMeFavoritesResponse) {
    option (google.api.http) = {
      get : "/api/v1/users/@me/favorites"
      response_body : "works"
    };
  };
  rpc GetUserFavorites(.users.schema.user_id.GetUserFavoritesRequest)
      returns (.users.schema.user_id.GetUserFavoritesResponse) {
    option (google.api.http) = {
      get : "/api/v1/users/{user_id}/favorites"
      response_body : "works"
    };
  };

  rpc PutMeAvatar(.users.schema.me.PutMeAvatarRequest)
      returns (users.model.User) {
    option (google.api.http) = {
      put : "/api/v1/users/@me/avatar"
      body : "*"
    };
  };
  rpc DeleteMeAvatar(google.protobuf.Empty) returns (users.model.User) {
    option (google.api.http) = {
      delete : "/api/v1/users/@me/avatar"
    };
  };
}