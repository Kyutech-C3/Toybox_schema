swagger: "2.0"
info:
  title: proto/schema/auth/schema/token/resource.proto
  version: version not set
tags:
  - name: AuthService
  - name: TagsService
  - name: UsersService
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1/auth/discord:
    get:
      operationId: AuthService_RedirectDiscord
      responses:
        "200":
          description: A successful response.
          schema:
            type: string
      tags:
        - AuthService
  /v1/auth/discord/callback:
    get:
      operationId: AuthService_DiscordCallBack
      responses:
        "200":
          description: A successful response.
          schema:
            type: string
      parameters:
        - name: code
          in: query
          required: false
          type: string
      tags:
        - AuthService
  /v1/auth/sign_up:
    post:
      operationId: AuthService_SignUp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/modelUser'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/sign_upSignUpRequest'
      tags:
        - AuthService
  /v1/auth/token:
    post:
      operationId: AuthService_ExchangeToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/tokenPostTokenResponse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/tokenPostTokenRequest'
      tags:
        - AuthService
  /v1/tags:
    get:
      operationId: TagsService_GetTags
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/tagsmodelTag'
            title: Stream result of tagsmodelTag
      parameters:
        - name: limit
          in: query
          required: false
          type: string
        - name: smallest_tag_id
          in: query
          required: false
          type: string
        - name: biggest_tag_id
          in: query
          required: false
          type: string
        - name: w
          in: query
          required: false
          type: string
      tags:
        - TagsService
  /v1/users:
    get:
      operationId: UsersService_GetUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/usersGetUsersResponse'
      parameters:
        - name: limit
          description: 'Default value: 30'
          in: query
          required: false
          type: integer
          format: int32
        - name: oldest_user_id
          in: query
          required: false
          type: string
        - name: newest_user_id
          in: query
          required: false
          type: string
      tags:
        - UsersService
  /v1/users/@me:
    get:
      operationId: UsersService_GetMe
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/modelUser'
      tags:
        - UsersService
    put:
      operationId: UsersService_PutMe
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/modelUser'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/mePutMeRequest'
      tags:
        - UsersService
  /v1/users/{user_id}:
    get:
      operationId: UsersService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/modelUser'
      parameters:
        - name: user_id
          description: Path parameter representing the user's ID
          in: path
          required: true
          type: string
      tags:
        - UsersService
definitions:
  mePutMeRequest:
    type: object
    example:
      display_name: string
      github_id: string
      profile: string
      twitter_id: string
    properties:
      display_name:
        type: string
      profile:
        type: string
      twitter_id:
        type: string
      github_id:
        type: string
  modelUser:
    type: object
    example:
      avatar_url: https://example.com/
      created_at: "2024-01-11T07:56:02.206Z"
      display_name: string
      github_id: string
      id: string
      name: string
      profile: string
      twitter_id: string
      updated_at: "2024-01-11T07:56:02.206Z"
    properties:
      id:
        type: string
      name:
        type: string
      display_name:
        type: string
      avatar_url:
        type: string
      profile:
        type: string
      twitter_id:
        type: string
      github_id:
        type: string
      created_at:
        $ref: '#/definitions/typeDateTime'
      updated_at:
        $ref: '#/definitions/typeDateTime'
  sign_upSignUpRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      display_name:
        type: string
      avatar_url:
        type: string
  tagsmodelTag:
    type: object
    example:
      color: '#000000'
      id: "1"
      name: tag1
    properties:
      id:
        type: string
      name:
        type: string
      color:
        type: string
  tokenPostTokenRequest:
    type: object
    properties:
      refresh_token:
        type: string
  tokenPostTokenResponse:
    type: object
    properties:
      expired_at:
        type: string
      refresh_token:
        type: string
      access_token:
        type: string
  typeDateTime:
    type: object
    properties:
      year:
        type: integer
        format: int32
        description: |-
          Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
          datetime without a year.
      month:
        type: integer
        format: int32
        description: Required. Month of year. Must be from 1 to 12.
      day:
        type: integer
        format: int32
        description: |-
          Required. Day of month. Must be from 1 to 31 and valid for the year and
          month.
      hours:
        type: integer
        format: int32
        description: |-
          Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
          may choose to allow the value "24:00:00" for scenarios like business
          closing time.
      minutes:
        type: integer
        format: int32
        description: Required. Minutes of hour of day. Must be from 0 to 59.
      seconds:
        type: integer
        format: int32
        description: |-
          Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
          API may allow the value 60 if it allows leap-seconds.
      nanos:
        type: integer
        format: int32
        description: |-
          Required. Fractions of seconds in nanoseconds. Must be from 0 to
          999,999,999.
      utc_offset:
        type: string
        description: |-
          UTC offset. Must be whole seconds, between -18 hours and +18 hours.
          For example, a UTC offset of -4:00 would be represented as
          { seconds: -14400 }.
      time_zone:
        $ref: '#/definitions/typeTimeZone'
        description: Time zone.
    description: |-
      Represents civil time (or occasionally physical time).

      This type can represent a civil time in one of a few possible ways:

       * When utc_offset is set and time_zone is unset: a civil time on a calendar
         day with a particular offset from UTC.
       * When time_zone is set and utc_offset is unset: a civil time on a calendar
         day in a particular time zone.
       * When neither time_zone nor utc_offset is set: a civil time on a calendar
         day in local time.

      The date is relative to the Proleptic Gregorian Calendar.

      If year is 0, the DateTime is considered not to have a specific year. month
      and day must have valid, non-zero values.

      This type may also be used to represent a physical time if all the date and
      time fields are set and either case of the `time_offset` oneof is set.
      Consider using `Timestamp` message for physical time instead. If your use
      case also would like to store the user's timezone, that can be done in
      another field.

      This type is more flexible than some applications may want. Make sure to
      document and validate your application's limitations.
  typeTimeZone:
    type: object
    properties:
      id:
        type: string
        description: IANA Time Zone Database time zone, e.g. "America/New_York".
      version:
        type: string
        description: Optional. IANA Time Zone Database version number, e.g. "2019a".
    description: |-
      Represents a time zone from the
      [IANA Time Zone Database](https://www.iana.org/time-zones).
  usersGetUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/modelUser'
